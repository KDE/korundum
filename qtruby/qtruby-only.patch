Index: Makefile.am.in
===================================================================
RCS file: /home/kde/kdebindings/Makefile.am.in,v
retrieving revision 1.7
diff -u -p -B -w -r1.7 Makefile.am.in
--- Makefile.am.in	20 Jul 2004 21:40:12 -0000	1.7
+++ Makefile.am.in	3 Sep 2004 12:48:55 -0000
@@ -1,21 +1,9 @@
 ## kdebindings/Makefile.am
 ## (C) 1997 Stephan Kulow
 
-COMPILE_BEFORE_kdejava = qtjava
-COMPILE_BEFORE_kdec = qtc
-COMPILE_BEFORE_xparts = dcopc
-
-# below if for proper korundum / qtruby build order
 COMPILE_BEFORE_qtruby = smoke
-COMPILE_BEFORE_korundum = qtruby
-
-# the below is for proper referencing of dcopperl into SUBDIRS
-COMPILE_BEFORE_dcopc = dcopperl
-
 AUTOMAKE_OPTIONS = foreign 1.5
 
-$(top_srcdir)/acinclude.m4: $(top_srcdir)/dcopc/glib.m4 $(top_srcdir)/dcopc/gtk.m4
-
 EXTRA_DIST = admin 
 
 include admin/deps.am
Index: configure.in.bot
===================================================================
RCS file: /home/kde/kdebindings/configure.in.bot,v
retrieving revision 1.6
diff -u -p -B -w -r1.6 configure.in.bot
--- configure.in.bot	19 Jun 2004 20:33:11 -0000	1.6
+++ configure.in.bot	3 Sep 2004 12:48:55 -0000
@@ -1,43 +1,5 @@
 dnl put here things which have to be done as very last part of configure
  
-all_tests=fine
-
-if test -z "$CSC_NAME"; then
-  echo ""
-  echo "A C# compiler wasn't found. The Qt# bindings need either Mono, Portable.NET or Rotor."
-  echo "You will need three things to compile the Qt# bindings:"
-  echo ""
-  echo "1. A C# compiler -- Mono's mcs, DotGNU/Portable.NET's cscc, or Rotors csc."
-  echo "" 
-  echo "2. A CLR JIT.  Mono's works the best right now.  Qt# will work somewhat with" 
-  echo "DotGNU/Portable.NET's ilrun and with Rotor's JIT."
-  echo ""
-  echo "3. Portable.NET's csant tool.  This is a Java ANT like build tool for C#" 
-  echo "programs.  You can find these tools at the following locations:"
-  echo "" 
-  echo "http://www.southern-storm.com.au/portable_net.html"
-  echo "http://go-mono.org"
-  echo "http://msdn.microsoft.com/downloads/default.asp?url=/downloads/topic.asp?URL=/MSDN-FILES/028/000/123/topic.xml"
-  all_tests=bad
-fi
-
-if test "x$kde_cv_java_bindir" = "xno"; then
-  echo ""
-  echo "Java wasn't found. The Java bindings need javac, javah and jni."
-  echo "Try using --with-java=/your/java/dir. Typing 'make' now will skip the java bindings."
-  echo ""
-  all_tests=bad
-fi
-
-if test -z "$LIBPYTHON" || test -z "$PYTHONINC"; then
-  echo ""
-  echo "Python or it's development files were not found. Qt and KDE bindings for Python will not be built."
-  echo ""
-  all_tests=bad
-fi
-
-if test "$all_tests" = "fine"; then
   echo ""
   echo "Good - your configure finished. Start make now"
   echo ""
-fi
Index: configure.in.in
===================================================================
RCS file: /home/kde/kdebindings/configure.in.in,v
retrieving revision 1.41
diff -u -p -B -w -r1.41 configure.in.in
--- configure.in.in	27 Jun 2004 09:22:39 -0000	1.41
+++ configure.in.in	3 Sep 2004 12:48:55 -0000
@@ -1,272 +1,31 @@
-#MIN_CONFIG
+AC_INIT(acinclude.m4) dnl a source file from your sub dir
 
-# Check for ECMA-335 image loader.
+dnl This is so we can use kde-common
+AC_CONFIG_AUX_DIR(admin)
 
-AC_DEFUN([KDE_CHECK_CLI],[
-	AC_ARG_WITH(cli, [  --with-cli=FILE         ECMA 335 PE image loader is FILE ],
-	[
-		AC_MSG_CHECKING(for CLI image loader)
+dnl This ksh/zsh feature conflicts with `cd blah ; pwd`
+unset CDPATH
 
-		if test -x "$with_cli"
-		then
-			CLI="$with_cli"
-			AC_MSG_RESULT($CLI)
-		fi
-	],
-	[
-		AC_PATH_PROG(CLI, mono, [], $PATH:/usr/local/bin)
+dnl Checking host/target/build systems, for make, install etc.
+AC_CANONICAL_SYSTEM 
+dnl Perform program name transformation
+AC_ARG_PROGRAM
 
-		if test -z "$CLI"
-		then
-			AC_PATH_PROG(CLI, ilrun, [], $PATH:/usr/local/bin)
-		fi
+dnl Automake doc recommends to do this only here. (Janos)
+AM_INIT_AUTOMAKE(@MODULENAME@, @VERSION@) dnl searches for some needed programs
 
-		if test -z "$CLI"
-		then
-			AC_PATH_PROG(CLI, clix, [], $PATH:/usr/local/bin)
-		fi
-	])
+dnl KDE_SET_PREFIX
 
-	AC_SUBST(CLI)
-])
+dnl generate the config header
+AM_CONFIG_HEADER(config.h) dnl at the distribution this done
 
-# Pick a C# compiler.
+dnl Checks for programs.
+AC_CHECK_COMPILERS
+AC_ENABLE_SHARED(yes)
+AC_ENABLE_STATIC(no)
+KDE_PROG_LIBTOOL
 
-# Check for Portable.NET's C# compiler
+AC_PATH_QT()
+AC_SUBST(all_includes)
+AC_SUBST(all_libraries)
 
-AC_DEFUN([KDE_CHECK_CSCC],[
-	AC_ARG_WITH(cscc, [  --with-cscc=FILE        cscc executable is FILE ],
-	[
-		AC_MSG_CHECKING(for $with_cscc)
-
-		if test -x $with_cscc
-		then
-			AC_MSG_RESULT(found)
-			cscc="$with_cscc"
-		else
-			AC_MSG_RESULT(no)
-		fi
-	],
-	[
-		AC_PATH_PROG(cscc, cscc, [], $PATH:/usr/local/bin)
-	])
-])
-
-# Check for Microsoft's C# compiler
-
-AC_DEFUN([KDE_CHECK_CSC],[
-	AC_ARG_WITH(csc, [  --with-csc=FILE         csc executable is FILE ],
-	[
-		AC_MSG_CHECKING(for $with_csc)
-
-		if test -x $with_csc
-		then
-			AC_MSG_RESULT(found)
-			csc="$with_csc"
-		else
-			AC_MSG_RESULT(no)
-		fi
-	],
-	[
-		AC_PATH_PROG(csc, csc.exe, [], $PATH:/usr/local/bin)
-
-		if test -z "$csc"
-		then
-			AC_PATH_PROG(csc, csc, [], $PATH:/usr/local/bin)
-		fi
-	])
-])
-
-# Check for Mono's C# compiler
-
-AC_DEFUN([KDE_CHECK_MCS],[
-	dnl AC_REQUIRE(KDE_CHECK_CLI)
-	AC_ARG_WITH(mcs, [  --with-mcs=FILE         mcs executable is FILE ],
-	[
-		AC_MSG_CHECKING(for $with_mcs)
-
-		if test -f $with_mcs
-		then
-			AC_MSG_RESULT(found)
-			mcs="$with_mcs"
-		else
-			AC_MSG_RESULT(no)
-		fi
-	],
-	[
-		AC_PATH_PROG(mcs, mcs, [], $PATH:/usr/local/bin)
-
-		if test -z "$mcs"
-		then
-			AC_PATH_PROG(mcs, mcs.exe, [], $PATH:/usr/local/bin)
-		fi
-	])
-
-])
-
-AM_PATH_GLIB([1.2.6])
-AM_PATH_GTK([1.2.6])
-
-# check for CSANT compiler
-
-AC_DEFUN([KDE_CHECK_CSANT],[
-])
-
-# Pick one of the available C# compilers.
-
-AC_DEFUN([KDE_CHECK_CS_COMPILER],[
-	KDE_CHECK_CSANT
-	KDE_CHECK_CSCC
-	KDE_CHECK_CSC
-	KDE_CHECK_MCS
-
-	AC_MSG_CHECKING(for c-sharp compiler)
-
-	AC_ARG_WITH(cs-compiler, [  --with-cs-compiler=NAME mcs, cscc, or csc ],
-	[
-		if test "$with_cs_compiler" = "cscc"
-		then
-			CSC="$cscc"
-			CSC_NAME="cscc"
-		fi
-
-		if test "$with_cs_compiler" = "csc"
-		then
-			CSC="$csc"
-			CSC_NAME="csc"
-		fi
-
-		if test "$with_cs_compiler" = "mcs"
-		then
-			CSC="$mono"
-			CSC_NAME="mcs"
-		fi
-
-		if test -z "$CSC_NAME"
-		then
-			AC_MSG_RESULT(no)
-			echo "ERROR: Unknown C# compiler: $with_cs_compiler"
-			exit
-		else
-			AC_MSG_RESULT($CSC_NAME)
-		fi
-	],
-	[
-		if test -n "$mcs"
-		then
-			CSC="$mcs"
-			CSC_NAME="mcs"
-			AC_MSG_RESULT(mcs)
-		else
-			if test -n "$cscc"
-			then
-				CSC="$cscc"
-				CSC_NAME="cscc"
-				AC_MSG_RESULT(cscc)
-			else
-				if test -n "$csc"
-				then
-					CSC="$csc"
-					CSC_NAME="csc"
-					AC_MSG_RESULT(csc)
-				fi
-			fi
-		fi
-
-		if test -z "$CSC_NAME"
-		then
-			AC_MSG_RESULT(no)
-    			DO_NOT_COMPILE="$DO_NOT_COMPILE qtsharp"
-		fi
-	])
-
-	AC_SUBST(CSC)
-	AC_SUBST(CSC_NAME)
-])
-
-dnl
-dnl Java checks
-dnl
-
-AC_DEFUN([KDE_CHECK_JAVA],
-[
- AC_REQUIRE([KDE_CHECK_JAVA_DIR])
- if test -z "$JAVAC"; then
-   DO_NOT_COMPILE="$DO_NOT_COMPILE $1";
- fi
-]
-)
-
-dnl
-dnl Check Perl
-dnl
-
-AC_DEFUN([KDE_CHECK_PERL],
-[
-  AC_ARG_VAR(PERL, full path to the perl program)
-  AC_PATH_PROG(PERL, perl, "perl")
-  AC_MSG_CHECKING([for Perl >= $1])
-  has_wanted_perl="not found"
-  if test -e "$PERL" && $PERL -e "require $1"; then
-      has_wanted_perl=yes
-  else
-      DO_NOT_COMPILE="$DO_NOT_COMPILE $2"
-  fi
-  AC_MSG_RESULT($has_wanted_perl)
-])
-
-dnl
-dnl Check whether we support Objective-C
-dnl
-
-AC_DEFUN([AC_PROG_OBJC],
-AC_MSG_CHECKING(for an Objective-C compiler - not implemented yet)
-
-OBJC="$CXX"
-AC_SUBST(OBJC)
-
-OBJCFLAGS="$CXXFLAGS -fgnu-runtime -fconstant-string-class=NSConstantString"
-AC_SUBST(OBJCFLAGS)
-)
-
-AC_DEFUN([KDE_CHECK_GNUSTEP],
-[
-AC_MSG_CHECKING(if objective-c enabled)
-AC_ARG_ENABLE(objc,
-[  --enable-objc    enable objective-c build],
-[enable_objc="$enableval"], enable_objc=no)
-AC_MSG_RESULT($enable_objc)
-
-dnl workaround for broken automake 1.7.x
-AM_CONDITIONAL([am__fastdepOBJC], false)
-
-if test "$enable_objc" = "yes"; then
-    AC_MSG_CHECKING(for gnustep system root)
-    if test -z $GNUSTEP_SYSTEM_ROOT ; then
-        GNUSTEPLIBDIR=
-        GNUSTEPINCDIRS=
-        AC_MSG_RESULT(not found)
-    else
-        AC_MSG_RESULT($GNUSTEP_SYSTEM_ROOT)
-        AC_MSG_CHECKING(for gnustep-base library)
-        GNUSTEPLIBDIR=`find $GNUSTEP_SYSTEM_ROOT/Libraries -name libgnustep-base.so | sed 's,libgnustep-base.so,,'|head -n 1`
-        AC_MSG_RESULT($GNUSTEPLIBDIR)
-        AC_MSG_CHECKING(for gnustep includes)
-        GNUSTEPINCDIRS="-I$GNUSTEP_SYSTEM_ROOT/Headers \
-		    -I$GNUSTEP_SYSTEM_ROOT/Headers/gnustep \
-			-I$GNUSTEP_SYSTEM_ROOT/Headers/$GNUSTEP_HOST_CPU/$GNUSTEP_HOST_OS"
-        AC_MSG_RESULT($GNUSTEPINCDIRS)
-        AC_PROG_OBJC
-	QTOBJC="qtobjc"
-	AC_SUBST(QTOBJC)
-    fi
-else
-    QTOBJC=""
-    DO_NOT_COMPILE="$DO_NOT_COMPILE qtobjc kdeobjc"
-fi
-AC_SUBST(GNUSTEPLIBDIR)
-AC_SUBST(GNUSTEPINCDIRS)
-])
-
-dnl remove when fixed
-DO_NOT_COMPILE="$DO_NOT_COMPILE dcopjava qtsharp"
Index: admin/configure.in.min
===================================================================
RCS file: /home/kde/kde-common/admin/configure.in.min,v
retrieving revision 1.11
diff -u -p -B -w -r1.11 configure.in.min
--- admin/configure.in.min	7 Nov 2001 11:17:28 -0000	1.11
+++ admin/configure.in.min	3 Sep 2004 12:48:55 -0000
@@ -38,7 +38,7 @@ AC_ARG_PROGRAM
 dnl Automake doc recommends to do this only here. (Janos)
 AM_INIT_AUTOMAKE(@MODULENAME@, @VERSION@) dnl searches for some needed programs
 
-KDE_SET_PREFIX
+dnl KDE_SET_PREFIX
 
 dnl generate the config header
 AM_CONFIG_HEADER(config.h) dnl at the distribution this done
@@ -51,7 +51,7 @@ KDE_PROG_LIBTOOL
 
 dnl for NLS support. Call them in this order!
 dnl WITH_NLS is for the po files
-AM_KDE_WITH_NLS
+dnl AM_KDE_WITH_NLS
 
 dnl KDE_USE_QT
-AC_PATH_KDE
+dnl AC_PATH_KDE
Index: qtruby/rubylib/designer/rbuic/Makefile.am
===================================================================
RCS file: /home/kde/kdebindings/qtruby/rubylib/designer/rbuic/Makefile.am,v
retrieving revision 1.2
diff -u -p -B -w -r1.2 Makefile.am
--- qtruby/rubylib/designer/rbuic/Makefile.am	17 Nov 2003 10:29:18 -0000	1.2
+++ qtruby/rubylib/designer/rbuic/Makefile.am	3 Sep 2004 12:48:55 -0000
@@ -13,7 +13,6 @@ librbuic_la_LIBADD  = $(LIB_QT) $(LIBZ)
 
 rbuic_SOURCES = main.cpp
 rbuic_LDADD   = librbuic.la $(all_libraries) 
-rbuic_LDFLAGS = $(KDE_RPATH)
 
 EXTRA_DIST = domtool.cpp domtool.h embed.cpp form.cpp globaldefs.h main.cpp object.cpp parser.cpp parser.h subclassing.cpp uic.cpp uic.h widgetdatabase.cpp widgetdatabase.h widgetinterface.h
 
Index: smoke/configure.in.in
===================================================================
RCS file: /home/kde/kdebindings/smoke/configure.in.in,v
retrieving revision 1.2
diff -u -p -B -w -r1.2 configure.in.in
--- smoke/configure.in.in	27 Jun 2004 09:22:40 -0000	1.2
+++ smoke/configure.in.in	3 Sep 2004 12:48:55 -0000
@@ -1,8 +1,8 @@
 AC_ARG_WITH(
    smoke,
-   [  --with-smoke@<:@=qt|kde@:>@   Smoke: build Smoke for qt+kde or qt only @<:@default:qt kde@:>@],
+   [  --with-smoke@<:@=qt|kde@:>@   Smoke: build Smoke for qt+kde or qt only @<:@default:qt@:>@],
    [ kde_build_libsmoke="$withval" ],
-   [ kde_build_libsmoke="qt kde" ]
+   [ kde_build_libsmoke="qt" ]
 )
 AC_SUBST(kde_build_libsmoke)
 
Index: smoke/qt/Makefile.am
===================================================================
RCS file: /home/kde/kdebindings/smoke/qt/Makefile.am,v
retrieving revision 1.19
diff -u -p -B -w -r1.19 Makefile.am
--- smoke/qt/Makefile.am	23 Aug 2004 10:11:28 -0000	1.19
+++ smoke/qt/Makefile.am	3 Sep 2004 12:48:55 -0000
@@ -6,7 +6,7 @@ INCLUDES         = -I$(srcdir)/.. $(all_
 EXTRA_DIST=generate.pl.in qtguess.pl.in qt_smoke.h Makefile.am
 
 # the library search path. 
-libsmokeqt_la_LDFLAGS = -version-info 3:2:2 -no-undefined $(all_libraries) $(GLINC) $(KDE_RPATH)
+libsmokeqt_la_LDFLAGS = -version-info 3:2:2 -no-undefined $(all_libraries) $(GLINC)
 
 # the libraries to link against.
 libsmokeqt_la_LIBADD   = $(LIB_QT) $(GLLIB)
